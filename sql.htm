@{

var InflectionJS =
{
    /*
      This is a list of nouns that use the same form for both singular and plural.
      This list should remain entirely in lower case to correctly match Strings.
    */
    uncountable_words: [
        'equipment', 'information', 'rice', 'money', 'species', 'series',
        'fish', 'sheep', 'moose', 'deer', 'news'
    ],

    /*
      These rules translate from the singular form of a noun to its plural form.
    */
    plural_rules: [
        [new RegExp('(m)an$', 'gi'),                 '$1en'],
        [new RegExp('(pe)rson$', 'gi'),              '$1ople'],
        [new RegExp('(child)$', 'gi'),               '$1ren'],
        [new RegExp('^(ox)$', 'gi'),                 '$1en'],
        [new RegExp('(ax|test)is$', 'gi'),           '$1es'],
        [new RegExp('(octop|vir)us$', 'gi'),         '$1i'],
        [new RegExp('(alias|status)$', 'gi'),        '$1es'],
        [new RegExp('(bu)s$', 'gi'),                 '$1ses'],
        [new RegExp('(buffal|tomat|potat)o$', 'gi'), '$1oes'],
        [new RegExp('([ti])um$', 'gi'),              '$1a'],
        [new RegExp('sis$', 'gi'),                   'ses'],
        [new RegExp('(?:([^f])fe|([lr])f)$', 'gi'),  '$1$2ves'],
        [new RegExp('(hive)$', 'gi'),                '$1s'],
        [new RegExp('([^aeiouy]|qu)y$', 'gi'),       '$1ies'],
        [new RegExp('(x|ch|ss|sh)$', 'gi'),          '$1es'],
        [new RegExp('(matr|vert|ind)ix|ex$', 'gi'),  '$1ices'],
        [new RegExp('([m|l])ouse$', 'gi'),           '$1ice'],
        [new RegExp('(quiz)$', 'gi'),                '$1zes'],
        [new RegExp('s$', 'gi'),                     's'],
        [new RegExp('$', 'gi'),                      's']
    ],

    /*
      These rules translate from the plural form of a noun to its singular form.
    */
    singular_rules: [
        [new RegExp('(m)en$', 'gi'),                                                       '$1an'],
        [new RegExp('(pe)ople$', 'gi'),                                                    '$1rson'],
        [new RegExp('(child)ren$', 'gi'),                                                  '$1'],
        [new RegExp('([ti])a$', 'gi'),                                                     '$1um'],
        [new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi'), '$1$2sis'],
        [new RegExp('(hive)s$', 'gi'),                                                     '$1'],
        [new RegExp('(tive)s$', 'gi'),                                                     '$1'],
        [new RegExp('(curve)s$', 'gi'),                                                    '$1'],
        [new RegExp('([lr])ves$', 'gi'),                                                   '$1f'],
        [new RegExp('([^fo])ves$', 'gi'),                                                  '$1fe'],
        [new RegExp('([^aeiouy]|qu)ies$', 'gi'),                                           '$1y'],
        [new RegExp('(s)eries$', 'gi'),                                                    '$1eries'],
        [new RegExp('(m)ovies$', 'gi'),                                                    '$1ovie'],
        [new RegExp('(x|ch|ss|sh)es$', 'gi'),                                              '$1'],
        [new RegExp('([m|l])ice$', 'gi'),                                                  '$1ouse'],
        [new RegExp('(bus)es$', 'gi'),                                                     '$1'],
        [new RegExp('(o)es$', 'gi'),                                                       '$1'],
        [new RegExp('(shoe)s$', 'gi'),                                                     '$1'],
        [new RegExp('(cris|ax|test)es$', 'gi'),                                            '$1is'],
        [new RegExp('(octop|vir)i$', 'gi'),                                                '$1us'],
        [new RegExp('(alias|status)es$', 'gi'),                                            '$1'],
        [new RegExp('^(ox)en', 'gi'),                                                      '$1'],
        [new RegExp('(vert|ind)ices$', 'gi'),                                              '$1ex'],
        [new RegExp('(matr)ices$', 'gi'),                                                  '$1ix'],
        [new RegExp('(quiz)zes$', 'gi'),                                                   '$1'],
        [new RegExp('s$', 'gi'),                                                           '']
    ],

    /*
      This is a list of words that should not be capitalized for title case
    */
    non_titlecased_words: [
        'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at',
        'by', 'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over',
        'with', 'for'
    ],

    /*
      These are regular expressions used for converting between String formats
    */
    id_suffix: new RegExp('(_ids|_id)$', 'g'),
    underbar: new RegExp('_', 'g'),
    space_or_underbar: new RegExp('[\ _]', 'g'),
    uppercase: new RegExp('([A-Z])', 'g'),
    underbar_prefix: new RegExp('^_'),
    
    /*
      This is a helper method that applies rules based replacement to a String
      Signature:
        InflectionJS.apply_rules(str, rules, skip, override) == String
      Arguments:
        str - String - String to modify and return based on the passed rules
        rules - Array: [RegExp, String] - Regexp to match paired with String to use for replacement
        skip - Array: [String] - Strings to skip if they match
        override - String (optional) - String to return as though this method succeeded (used to conform to APIs)
      Returns:
        String - passed String modified by passed rules
      Examples:
        InflectionJS.apply_rules("cows", InflectionJs.singular_rules) === 'cow'
    */
    apply_rules: function(str, rules, skip, override)
    {
        if (override)
        {
            str = override;
        }
        else
        {
            var ignore = (skip.indexOf(str.toLowerCase()) > -1);
            if (!ignore)
            {
                for (var x = 0; x < rules.length; x++)
                {
                    if (str.match(rules[x][0]))
                    {
                        str = str.replace(rules[x][0], rules[x][1]);
                        break;
                    }
                }
            }
        }
        return str;
    }
};

/*
  This lets us detect if an Array contains a given element
  Signature:
    Array.indexOf(item, fromIndex, compareFunc) == Integer
  Arguments:
    item - Object - object to locate in the Array
    fromIndex - Integer (optional) - starts checking from this position in the Array
    compareFunc - Function (optional) - function used to compare Array item vs passed item
  Returns:
    Integer - index position in the Array of the passed item
  Examples:
    ['hi','there'].indexOf("guys") === -1
    ['hi','there'].indexOf("hi") === 0
*/
if (!Array.prototype.indexOf)
{
    Array.prototype.indexOf = function(item, fromIndex, compareFunc)
    {
        if (!fromIndex)
        {
            fromIndex = -1;
        }
        var index = -1;
        for (var i = fromIndex; i < this.length; i++)
        {
            if (this[i] === item || compareFunc && compareFunc(this[i], item))
            {
                index = i;
                break;
            }
        }
        return index;
    };
}

/*
  You can override this list for all Strings or just one depending on if you
  set the new values on prototype or on a given String instance.
*/
if (!String.prototype._uncountable_words)
{
    String.prototype._uncountable_words = InflectionJS.uncountable_words;
}

/*
  You can override this list for all Strings or just one depending on if you
  set the new values on prototype or on a given String instance.
*/
if (!String.prototype._plural_rules)
{
    String.prototype._plural_rules = InflectionJS.plural_rules;
}

/*
  You can override this list for all Strings or just one depending on if you
  set the new values on prototype or on a given String instance.
*/
if (!String.prototype._singular_rules)
{
    String.prototype._singular_rules = InflectionJS.singular_rules;
}

/*
  You can override this list for all Strings or just one depending on if you
  set the new values on prototype or on a given String instance.
*/
if (!String.prototype._non_titlecased_words)
{
    String.prototype._non_titlecased_words = InflectionJS.non_titlecased_words;
}

/*
  This function adds plurilization support to every String object
    Signature:
      String.pluralize(plural) == String
    Arguments:
      plural - String (optional) - overrides normal output with said String
    Returns:
      String - singular English language nouns are returned in plural form
    Examples:
      "person".pluralize() == "people"
      "octopus".pluralize() == "octopi"
      "Hat".pluralize() == "Hats"
      "person".pluralize("guys") == "guys"
*/
if (!String.prototype.pluralize)
{
    String.prototype.pluralize = function(plural)
    {
        return InflectionJS.apply_rules(
            this,
            this._plural_rules,
            this._uncountable_words,
            plural
        );
    };
}

/*
  This function adds singularization support to every String object
    Signature:
      String.singularize(singular) == String
    Arguments:
      singular - String (optional) - overrides normal output with said String
    Returns:
      String - plural English language nouns are returned in singular form
    Examples:
      "people".singularize() == "person"
      "octopi".singularize() == "octopus"
      "Hats".singularize() == "Hat"
      "guys".singularize("person") == "person"
*/
if (!String.prototype.singularize)
{
    String.prototype.singularize = function(singular)
    {
        return InflectionJS.apply_rules(
            this,
            this._singular_rules,
            this._uncountable_words,
            singular
        );
    };
}

/*
  This function adds camelization support to every String object
    Signature:
      String.camelize(lowFirstLetter) == String
    Arguments:
      lowFirstLetter - boolean (optional) - default is to capitalize the first
        letter of the results... passing true will lowercase it
    Returns:
      String - lower case underscored words will be returned in camel case
        additionally '/' is translated to '::'
    Examples:
      "message_properties".camelize() == "MessageProperties"
      "message_properties".camelize(true) == "messageProperties"
*/
if (!String.prototype.camelize)
{
     String.prototype.camelize = function(lowFirstLetter)
     {
        var str = this.toLowerCase();
        var str_path = str.split('/');
        for (var i = 0; i < str_path.length; i++)
        {
            var str_arr = str_path[i].split('_');
            var initX = ((lowFirstLetter && i + 1 === str_path.length) ? (1) : (0));
            for (var x = initX; x < str_arr.length; x++)
            {
                str_arr[x] = str_arr[x].charAt(0).toUpperCase() + str_arr[x].substring(1);
            }
            str_path[i] = str_arr.join('');
        }
        str = str_path.join('::');
        return str;
    };
}

/*
  This function adds underscore support to every String object
    Signature:
      String.underscore() == String
    Arguments:
      N/A
    Returns:
      String - camel cased words are returned as lower cased and underscored
        additionally '::' is translated to '/'
    Examples:
      "MessageProperties".camelize() == "message_properties"
      "messageProperties".underscore() == "message_properties"
*/
if (!String.prototype.underscore)
{
     String.prototype.underscore = function()
     {
        var str = this;
        var str_path = str.split('::');
        for (var i = 0; i < str_path.length; i++)
        {
            str_path[i] = str_path[i].replace(InflectionJS.uppercase, '_$1');
            str_path[i] = str_path[i].replace(InflectionJS.underbar_prefix, '');
        }
        str = str_path.join('/').toLowerCase();
        return str;
    };
}

/*
  This function adds humanize support to every String object
    Signature:
      String.humanize(lowFirstLetter) == String
    Arguments:
      lowFirstLetter - boolean (optional) - default is to capitalize the first
        letter of the results... passing true will lowercase it
    Returns:
      String - lower case underscored words will be returned in humanized form
    Examples:
      "message_properties".humanize() == "Message properties"
      "message_properties".humanize(true) == "message properties"
*/
if (!String.prototype.humanize)
{
    String.prototype.humanize = function(lowFirstLetter)
    {
        var str = this.toLowerCase();
        str = str.replace(InflectionJS.id_suffix, '');
        str = str.replace(InflectionJS.underbar, ' ');
        if (!lowFirstLetter)
        {
            str = str.capitalize();
        }
        return str;
    };
}

/*
  This function adds capitalization support to every String object
    Signature:
      String.capitalize() == String
    Arguments:
      N/A
    Returns:
      String - all characters will be lower case and the first will be upper
    Examples:
      "message_properties".capitalize() == "Message_properties"
      "message properties".capitalize() == "Message properties"
*/
if (!String.prototype.capitalize)
{
    String.prototype.capitalize = function()
    {
        var str = this.toLowerCase();
        str = str.substring(0, 1).toUpperCase() + str.substring(1);
        return str;
    };
}

/*
  This function adds dasherization support to every String object
    Signature:
      String.dasherize() == String
    Arguments:
      N/A
    Returns:
      String - replaces all spaces or underbars with dashes
    Examples:
      "message_properties".capitalize() == "message-properties"
      "Message Properties".capitalize() == "Message-Properties"
*/
if (!String.prototype.dasherize)
{
    String.prototype.dasherize = function()
    {
        var str = this;
        str = str.replace(InflectionJS.space_or_underbar, '-');
        return str;
    };
}

/*
  This function adds titleize support to every String object
    Signature:
      String.titleize() == String
    Arguments:
      N/A
    Returns:
      String - capitalizes words as you would for a book title
    Examples:
      "message_properties".titleize() == "Message Properties"
      "message properties to keep".titleize() == "Message Properties to Keep"
*/
if (!String.prototype.titleize)
{
    String.prototype.titleize = function()
    {
        var str = this.toLowerCase();
        str = str.replace(InflectionJS.underbar, ' ');
        var str_arr = str.split(' ');
        for (var x = 0; x < str_arr.length; x++)
        {
            var d = str_arr[x].split('-');
            for (var i = 0; i < d.length; i++)
            {
                if (this._non_titlecased_words.indexOf(d[i].toLowerCase()) < 0)
                {
                    d[i] = d[i].capitalize();
                }
            }
            str_arr[x] = d.join('-');
        }
        str = str_arr.join(' ');
        str = str.substring(0, 1).toUpperCase() + str.substring(1);
        return str;
    };
}

/*
  This function adds demodulize support to every String object
    Signature:
      String.demodulize() == String
    Arguments:
      N/A
    Returns:
      String - removes module names leaving only class names (Ruby style)
    Examples:
      "Message::Bus::Properties".demodulize() == "Properties"
*/
if (!String.prototype.demodulize)
{
    String.prototype.demodulize = function()
    {
        var str = this;
        var str_arr = str.split('::');
        str = str_arr[str_arr.length - 1];
        return str;
    };
}

/*
  This function adds tableize support to every String object
    Signature:
      String.tableize() == String
    Arguments:
      N/A
    Returns:
      String - renders camel cased words into their underscored plural form
    Examples:
      "MessageBusProperty".tableize() == "message_bus_properties"
*/
if (!String.prototype.tableize)
{
    String.prototype.tableize = function()
    {
        var str = this;
        str = str.underscore().pluralize();
        return str;
    };
}

/*
  This function adds classification support to every String object
    Signature:
      String.classify() == String
    Arguments:
      N/A
    Returns:
      String - underscored plural nouns become the camel cased singular form
    Examples:
      "message_bus_properties".classify() == "MessageBusProperty"
*/
if (!String.prototype.classify)
{
    String.prototype.classify = function()
    {
        var str = this;
        str = str.camelize().singularize();
        return str;
    };
}

/*
  This function adds foreign key support to every String object
    Signature:
      String.foreign_key(dropIdUbar) == String
    Arguments:
      dropIdUbar - boolean (optional) - default is to seperate id with an
        underbar at the end of the class name, you can pass true to skip it
    Returns:
      String - camel cased singular class names become underscored with id
    Examples:
      "MessageBusProperty".foreign_key() == "message_bus_property_id"
      "MessageBusProperty".foreign_key(true) == "message_bus_propertyid"
*/
if (!String.prototype.foreign_key)
{
    String.prototype.foreign_key = function(dropIdUbar)
    {
        var str = this;
        str = str.demodulize().underscore() + ((dropIdUbar) ? ('') : ('_')) + 'id';
        return str;
    };
}

/*
  This function adds ordinalize support to every String object
    Signature:
      String.ordinalize() == String
    Arguments:
      N/A
    Returns:
      String - renders all found numbers their sequence like "22nd"
    Examples:
      "the 1 pitch".ordinalize() == "the 1st pitch"
*/
if (!String.prototype.ordinalize)
{
    String.prototype.ordinalize = function()
    {
        var str = this;
        var str_arr = str.split(' ');
        for (var x = 0; x < str_arr.length; x++)
        {
            var i = parseInt(str_arr[x]);
            if (i === NaN)
            {
                var ltd = str_arr[x].substring(str_arr[x].length - 2);
                var ld = str_arr[x].substring(str_arr[x].length - 1);
                var suf = "th";
                if (ltd != "11" && ltd != "12" && ltd != "13")
                {
                    if (ld === "1")
                    {
                        suf = "st";
                    }
                    else if (ld === "2")
                    {
                        suf = "nd";
                    }
                    else if (ld === "3")
                    {
                        suf = "rd";
                    }
                }
                str_arr[x] += suf;
            }
        }
        str = str_arr.join(' ');
        return str;
    };
}

	function hasLength(typeName) {
		return (typeName === 'char' ||
				typeName === 'nchar' ||
				typeName === 'nvarchar' ||
				typeName === 'varchar' ||
				typeName === 'sysname');
	}
	
	function getRelationNames(relationName) {
		var singular = relationName.singularize();
		return [singular, singular.pluralize()];
	}
		
	var actionsList = {
		'create_table': function (tableName, action) {
			return [
				'CREATE TABLE [', tableName, '] ',
				'([ID] [int] IDENTITY(1,1) NOT NULL, ',
					' CONSTRAINT [PK_', tableName, '] PRIMARY KEY CLUSTERED ([ID] ASC)',
					' WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]',
				') ON [PRIMARY];'];
		},
		'add_column': function (tableName, action) {
			var m = ['ALTER TABLE ', tableName, ' ADD ', action.columnName, ' ', action.columnType];
			if (hasLength(action.columnType)) {
				m.push('(', action.maxlength, ')');
			}
			if (action.isNullable) {
				m.push(' NULL');
			} else {
				m.push(' NOT NULL');
			}
			m.push(';');
			return m;
		}, 
		'drop_column': function (tableName, action) {
			return ['ALTER TABLE ', tableName, ' DROP COLUMN ', action.columnName, ';'];
		},
		'drop_foreign_key': function (tableName, action) {
			return ['ALTER TABLE ', tableName, ' DROP ', action.name, ';'];
		},
		'rename_column': function (tableName, action) {
			return ['EXEC sp_rename ',
						'@objname = \'', tableName, '.', action.oldColumnName, '\', ',
						'@newname = \'', action.newColumnName, '\', ',
						'@objtype = \'COLUMN\';'];
		},
		'alter_column': function (tableName, action) {
			var m = ['ALTER TABLE ', tableName, ' ALTER COLUMN ', action.columnName, ' ', action.columnType];
			if (hasLength(action.columnType)) {
				m.push('(', action.maxlength, ')');
			}
			if (action.isNullable) {
				m.push(' NULL');
			} else {
				m.push(' NOT NULL');
			}
			m.push(';');
			return m;
		},
		'delete_table': function(tableName, action) {
			return ['DROP TABLE ', tableName, ';'];
		},
		'add_relation': function (tableName, action) {
			if (action.relationType === 'onetomany' || action.relationType === 'manytoone') {
				var m = [];
				m.push('ALTER TABLE ');
				
				if (action.relationType === 'onetomany') {
					m.push(action.to);
				} else {
					m.push(tableName);
				}
				
				m.push(' ADD ');
				m.push(action.fieldName);
				m.push(' int NOT NULL; ALTER TABLE ');
				
				if (action.relationType === 'onetomany') {
					m.push(action.to);
				} else {
					m.push(tableName);
				}
				
				var constraintName = typeof action.constraintName === 'undefined' ? 'FK_' + Math.floor((Math.random() * 10000000000) + 1) + tableName + action.to : action.constraintName;
				
				m.push(' ADD CONSTRAINT ');
				m.push(constraintName);
				m.push(' FOREIGN KEY (')
				m.push(action.fieldName);
				m.push(') REFERENCES ');
				
				if (action.relationType === 'onetomany') {
					m.push(tableName);
				} else {
					m.push(action.to);
				}
				
				var attributes = {
					"relationType": action.relationType
				};
				
				if (action.to !== tableName) {
					attributes['access_' + action.to.toLowerCase()] = tableName;
					attributes['access_' + tableName.toLowerCase()] = action.to;
				} else {
					attributes['access_parent'] = action['access_parent'];
					attributes['access_children'] = action['access_children'];
				}
				
				m.push('([Id]) ON DELETE NO ACTION;');
				m.push('EXEC sys.sp_addextendedproperty ',
							'@name = N\'RELATION_PROPERTIES\', ',
							'@value = N\'', JSON.stringify(attributes), '\', ',  
							'@level0type = N\'SCHEMA\', @level0name = dbo, ',
							'@level1type = N\'TABLE\',  @level1name = ', action.relationType === 'onetomany' ? action.to : tableName, ', ',
							'@level2type = N\'CONSTRAINT\', @level2name = ', constraintName, ';');							
				return m;
			} else if (action.relationType === 'manytomany') {
				var constraintName1 = 'FK_MANYTOMANY_' + Math.floor((Math.random() * 10000000000) + 1) + action.relationTable + action.to;
				var constraintName2 = 'FK_MANYTOMANY_' + Math.floor((Math.random() * 10000000000) + 1) + action.relationTable + tableName;
								
				var attributes = {
					"relationType": action.relationType,
					"relationTable": action.relationTable
				};
				
				if (action.to !== tableName) {
					attributes['access_' + action.to.toLowerCase()] = tableName;
					attributes['access_' + tableName.toLowerCase()] = action.to;
				} else {
					attributes['access_parent'] = action['access_parent'];
					attributes['access_children'] = action['access_children'];
				}
				
				var tableNameSingular = tableName.singularize();
				var tableToSingular = action.to.singularize();
				return ['CREATE TABLE [', action.relationTable, '] (',
							'[', tableNameSingular, tableName === action.to ? '_1' : '', 'ID] [int] NOT NULL, ',
							'[', tableToSingular, tableName === action.to ? '_2' : '', 'ID] [int] NOT NULL);',
						'ALTER TABLE [', action.relationTable, '] ',
							'ADD CONSTRAINT ', constraintName1, ' FOREIGN KEY (', tableToSingular, 'ID) REFERENCES ', action.to, ';',
						'ALTER TABLE [', action.relationTable, '] ',
							'ADD CONSTRAINT ', constraintName2, ' FOREIGN KEY (', tableNameSingular, 'ID) REFERENCES ', tableName, ';',							
						'EXEC sys.sp_addextendedproperty ',
							'@name = N\'RELATION_PROPERTIES\', ',
							'@value = N\'', JSON.stringify(attributes), '\', ',
							'@level0type = N\'SCHEMA\', @level0name = dbo, ',
							'@level1type = N\'TABLE\',  @level1name = ', action.relationTable, ', ',
							'@level2type = N\'CONSTRAINT\', @level2name = ', constraintName1, ';',
						'EXEC sys.sp_addextendedproperty ',
							'@name = N\'RELATION_PROPERTIES\', ',
							'@value = N\'', JSON.stringify(attributes), '\', ',
							'@level0type = N\'SCHEMA\', @level0name = dbo, ',
							'@level1type = N\'TABLE\',  @level1name = ', action.relationTable, ', ',
							'@level2type = N\'CONSTRAINT\', @level2name = ', constraintName2, ';',						
				];
			}
		}	
	};
	
	function buildSql(tableName, queue) { 
		var sql = [];
		
		for (var i = 0; i < queue.length; i++) {
			var t = actionsList[queue[i].type](
				typeof queue[i].tableName === 'undefined' ? tableName : queue[i].tableName, 
				queue[i]);
			
			for (var j = 0; j < t.length; j++) {
				sql.push(t[j]);
			}
		}
		
		return sql.join('');
	}
	
	var rv;
	switch ([[Q:Type]]) {
		case 'gettables':
			var tables = $data.sqlList("SELECT table_name FROM information_schema.tables ORDER BY TABLE_NAME");
			var json = [];
		
			for (var i = 0; i < tables.length; i++) {
				json.push(tables[i]['table_name']);
			}
			
			rv = $server.json(json);
			break;
			
		case 'getcolumns':
			var query = [
				'SELECT sys.columns.Name AS name, ',
					   'sys.columns.is_nullable, ',
					   'CAST(sys.columns.max_length AS int) AS maxlength, ', 
					   'sys.types.name AS typeName ',
				'FROM sys.tables ',
					'JOIN sys.schemas ON sys.schemas.schema_id = sys.tables.schema_id ',
					'JOIN sys.columns ON sys.columns.object_id = sys.tables.object_id ',
					'JOIN sys.types ON sys.types.user_type_id = sys.columns.system_type_id ',
				"WHERE sys.tables.name = '", $data.safe([[Q:tableName]]), "'"
			].join('');
			
			rv = $server.JSON($data.sqlList(query));
			break;
			
		case 'getrelations':
			var query = [
				'SELECT DISTINCT ',
					'k_table = FK.TABLE_NAME,',
					'fk_column = CU.COLUMN_NAME,',
					'pk_table = PK.TABLE_NAME,',
					'pk_column = PT.COLUMN_NAME,',
					'constraint_name = C.CONSTRAINT_NAME,',
					'metadata = t1.value ',
				'FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS C ',
					'INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS FK ON C.CONSTRAINT_NAME = FK.CONSTRAINT_NAME ',
					'INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS PK ON C.UNIQUE_CONSTRAINT_NAME = PK.CONSTRAINT_NAME ',
					'INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE CU ON C.CONSTRAINT_NAME = CU.CONSTRAINT_NAME ',
				'INNER JOIN (',
					'SELECT i1.TABLE_NAME, i2.COLUMN_NAME ',
					'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS i1 ',
						'INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE i2 ON i1.CONSTRAINT_NAME = i2.CONSTRAINT_NAME ',
					"WHERE i1.CONSTRAINT_TYPE = 'PRIMARY KEY'",
				') PT ON PT.TABLE_NAME = PK.TABLE_NAME ',
				/*'OUTER APPLY (SELECT sys.extended_properties.value AS value ',
							 'FROM sys.tables ',
								'JOIN sys.schemas ON sys.schemas.schema_id = sys.tables.schema_id ',
								'JOIN sys.columns ON sys.columns.object_id = sys.tables.object_id ',							 
							 	'JOIN sys.extended_properties ON sys.extended_properties.major_id = sys.columns.object_id ',
							 'WHERE sys.extended_properties.class = 1 AND sys.tables.name = FK.TABLE_NAME AND sys.columns.name = CU.COLUMN_NAME) t1 ',*/
				'OUTER APPLY (SELECT value FROM fn_listextendedproperty (NULL, \'schema\', \'dbo\', \'table\', FK.TABLE_NAME, \'constraint\', C.CONSTRAINT_NAME)) t1 ',
				'WHERE FK.TABLE_NAME=\'', $data.safe([[Q:tableName]]), '\' OR ',
					   'PK.TABLE_NAME=\'', $data.safe([[Q:tableName]]), '\';'].join('');
		
			rv = $server.JSON($data.sqlList(query));
			break;
			
		case 'save':
			var sql = buildSql($data.safe([[Q:tableName]]), JSON.parse(unescape([[F:queue]])));
			rv = $data.sql(sql);
			$data.resetSchema()
			break;
			
		case 'query':
			var tableName = $data.safe([[Q:tableName]]);
			
			var qtype = $data.safe([[Q:qtype]]) || '';
			var qquery = $data.safe([[Q:query]]) || '';

			var sortorder = $data.safe([[Q:sortorder]]) || 'ASC';
			var sortname = $data.safe([[Q:sortname]]) || 'id';
			
			var query = ['SELECT TOP 10 [', tableName, '].* FROM ', tableName, ' '];
			
			if (qtype !== '' && qquery !== '') {
				query.push('WHERE ', qtype, ' = \'', qquery, '\' ');
			}
			
			query.push('ORDER BY ', sortname, ' ', sortorder);
			
			var data = $data.queryList(query.join(''));
			var json = { page: 1, total: data.length, rows: [] };
	
			for (var i = 0; i < data.length; i++) {
				json.rows.push({ id: data[i].ID, cell: data[i] });
			}
			
			rv = $server.json(json);
			break;
			
		case 'delete_table':
			rv = $data.sql('DROP TABLE ' + $data.safe([[Q:tableName]]));
			$data.resetSchema()
			break;
			
		case 'rename_table':
			rv = $data.sql(['sp_RENAME \'', $data.safe([[Q:tableName]]), '\', \'', $data.safe([[Q:newTableName]]), '\''].join(''));
			$data.resetSchema()
			break;
	}
	
	rv;
}@